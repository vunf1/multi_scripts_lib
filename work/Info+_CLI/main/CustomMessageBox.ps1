
Add-Type -AssemblyName System.Windows.Forms

function Show-Confirmation {
    param (
        [string]$message,
        [string]$title
    )
    
    # Create a hidden form to enforce STA mode
    $form = New-Object System.Windows.Forms.Form -Property @{ TopMost = $true; Visible = $false }
    
    # Show the MessageBox in a proper STA thread
    $response = [System.Windows.Forms.MessageBox]::Show($form, $message, $title, 
        [System.Windows.Forms.MessageBoxButtons]::YesNo, 
        [System.Windows.Forms.MessageBoxIcon]::Question)
    
    return $response
}

function Show-Info {
    param (
        [string]$message,
        [string]$title
    )
    $form = New-Object System.Windows.Forms.Form -Property @{ TopMost = $true; Visible = $false }
    return [System.Windows.Forms.MessageBox]::Show($form, $message, $title, 
        [System.Windows.Forms.MessageBoxButtons]::OK, 
        [System.Windows.Forms.MessageBoxIcon]::Information)
}

function Show-Warning {
    param (
        [string]$message,
        [string]$title
    )
    $form = New-Object System.Windows.Forms.Form -Property @{ TopMost = $true; Visible = $false }
    return [System.Windows.Forms.MessageBox]::Show($form, $message, $title, 
        [System.Windows.Forms.MessageBoxButtons]::OK, 
        [System.Windows.Forms.MessageBoxIcon]::Warning)
}

function Show-OkCancel {
    param (
        [string]$message,
        [string]$title
    )

    # Create a hidden form to enforce STA mode and ensure proper MessageBox behavior
    $form = New-Object System.Windows.Forms.Form -Property @{ TopMost = $true; Visible = $false }
    
    # Show the MessageBox in a proper STA thread with OK and Cancel buttons
    $response = [System.Windows.Forms.MessageBox]::Show($form, $message, $title, 
        [System.Windows.Forms.MessageBoxButtons]::OKCancel, 
        [System.Windows.Forms.MessageBoxIcon]::Information)
    
    return $response
}

function Show-Error {
    param (
        [string]$message,
        [string]$title
    )

    # Create a hidden form to enforce STA mode and avoid thread-related issues
    $form = New-Object System.Windows.Forms.Form -Property @{ TopMost = $true; Visible = $false }
    
    # Show an error message box with an OK button
    return [System.Windows.Forms.MessageBox]::Show($form, $message, $title, 
        [System.Windows.Forms.MessageBoxButtons]::OK, 
        [System.Windows.Forms.MessageBoxIcon]::Error)
}
# Unicode Emojis Using UTF-8 Encoding
$unicodeEmojiGrinningFace = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x98, 0x80))  # üòÄ Grinning Face
$unicodeEmojiSmilingFaceWithSmilingEyes = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x98, 0x8A))  # üòä Smiling Face with Smiling Eyes
$unicodeEmojiThumbsUp = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x91, 0x8D))  # üëç Thumbs Up
$unicodeEmojiThumbsDown = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x91, 0x8E))  # üëé Thumbs Down
$unicodeEmojiRocket = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x9A, 0x80))  # üöÄ Rocket
$unicodeEmojiCheckMark = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xE2, 0x9C, 0x85))  # ‚úÖ Check Mark
$unicodeEmojiCrossMark = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xE2, 0x9D, 0x8C))  # ‚ùå Cross Mark
$unicodeEmojiWarning = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xE2, 0x9A, 0xA0))  # ‚ö†Ô∏è Warning
$unicodeEmojiInformation = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xE2, 0x84, 0xB9))  # ‚ÑπÔ∏è Information
$unicodeEmojiHourglass = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xE2, 0x8C, 0x9B))  # ‚åõ Hourglass
$unicodeEmojiLightBulb = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x92, 0xA1))  # üí° Light Bulb
$unicodeEmojiFire = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x94, 0xA5))  # üî• Fire
$unicodeEmojiHeart = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xE2, 0x99, 0xA5))  # ‚ô• Heart
$unicodeEmojiStar = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xE2, 0xAD, 0x90))  # ‚≠ê Star
$unicodeEmojiWave = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x8C, 0x8A))  # üåä Wave
$unicodeEmojiBarChart = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x93, 0x8A))  # üìä Bar Chart
$unicodeEmojiKeyboard = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x96, 0xA4))  # ‚å®Ô∏è Keyboard
$unicodeEmojiGlobe = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x8C, 0x90))  # üåê Globe
$unicodeEmojiLock = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x94, 0x92))  # üîí Lock
$unicodeEmojiSlot = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x97, 0xBC))  # üóº RAM Slot (Tower)
$unicodeEmojiComputer = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x92, 0xBB))  # üíª Computer
$unicodeEmojiChip = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0xA7, 0xA1))  # üß° Chip
$unicodeEmojiDatabase = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x93, 0x81))  # üìÅ Database
$unicodeEmojiServer = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x97, 0x82))  # üñÇ Server
$unicodeEmojiPrinter = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x96, 0xA8))  # üñ®Ô∏è Printer
$unicodeEmojiBattery = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x94, 0x8B))  # üîã Battery
$unicodeEmojiNetwork = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x93, 0xA3))  # üì£ Network
$unicodeEmojiHardDrive = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x96, 0xA5))  # üñ•Ô∏è Hard Drive
$unicodeEmojiBug = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x90, 0x9E))  # üêû Bug
$unicodeEmojiWrench = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x94, 0xA7))  # üîß Wrench
$unicodeEmojiClock = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x95, 0x92))  # ‚è≤Ô∏è Clock
$unicodeEmojiTrans = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x94, 0xA3))  # üî£ 
$unicodeEmojiMagnifyingGlass = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x94, 0x8D))  # üîç Magnifying Glass
$unicodeEmojiFolder = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x93, 0x82))  # üìÇ Folder
$unicodeEmojiSatellite = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x9A, 0xA1))  # üö° Satellite

$unicodeEmojiCPU = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0xA7, 0xA1))  # üß† CPU / Processor

$unicodeEmojiChip = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x92, 0xBB))  # üíª Chipset
$unicodeEmojiCooling = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x92, 0xA7))  # üíß Cooling System
$unicodeEmojiFan = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0xA8, 0x81))  # üåÄ Fan / Airflow
$unicodeEmojiStorage = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xF0, 0x9F, 0x93, 0x81))  # üìÅ SSD / HDD Storage

# Unicode Fullwidth Numbers (Large Format)
$unicodeEmojiFullwidthZero = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xEF, 0xBC, 0x90))  # Ôºê Fullwidth Zero
$unicodeEmojiFullwidthOne = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xEF, 0xBC, 0x91))  # Ôºë Fullwidth One
$unicodeEmojiFullwidthTwo = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xEF, 0xBC, 0x92))  # Ôºí Fullwidth Two
$unicodeEmojiFullwidthThree = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xEF, 0xBC, 0x93))  # Ôºì Fullwidth Three
$unicodeEmojiFullwidthFour = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xEF, 0xBC, 0x94))  # Ôºî Fullwidth Four
$unicodeEmojiFullwidthFive = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xEF, 0xBC, 0x95))  # Ôºï Fullwidth Five
$unicodeEmojiFullwidthSix = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xEF, 0xBC, 0x96))  # Ôºñ Fullwidth Six
$unicodeEmojiFullwidthSeven = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xEF, 0xBC, 0x97))  # Ôºó Fullwidth Seven
$unicodeEmojiFullwidthEight = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xEF, 0xBC, 0x98))  # Ôºò Fullwidth Eight
$unicodeEmojiFullwidthNine = [System.Text.Encoding]::UTF8.GetString([byte[]]@(0xEF, 0xBC, 0x99))  # Ôºô Fullwidth Nine
